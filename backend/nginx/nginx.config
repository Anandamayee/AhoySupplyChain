# User and worker processes
user www-data;  # user under which Nginx runs
worker_processes auto;  # Automatically adjust the number of worker processes based on the number of CPU cores

# Error logging
error_log /var/log/nginx/error.log warn;  # Set appropriate log level; 'warn' is usually sufficient

# PID file
pid /run/nginx.pid;

events {
    worker_connections 2048;  # Increase the number of worker connections if needed
    multi_accept on;  # Allows workers to accept multiple connections at once
}

http {
    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;  # Enable access logs

    sendfile on;
    tcp_nopush on;  # Helps with performance by reducing TCP packet overhead
    tcp_nodelay on;  # Reduces latency

    keepalive_timeout 65;  # Keep connections alive for 65 seconds

    # Optimize buffer sizes
    client_max_body_size 1M;  # Decrease since file uploads are not needed
    client_body_buffer_size 8k;  # Decrease buffer size as needed
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;

     # SSL/TLS settings
    ssl_certificate      /etc/nginx/ssl/certificate.crt;
    ssl_certificate_key  /etc/nginx/ssl/private.key;
    ssl_password_file   /etc/nginx/ssl/passphrase.txt;

    ssl_protocols         TLSv1.2 TLSv1.3;
    ssl_ciphers           'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA';
    ssl_prefer_server_ciphers on;  # Prefer server's cipher suite order
    
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), fullscreen=()";

    # Additional security headers
    add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self' data:; connect-src 'self'; font-src 'self'; object-src 'none'; base-uri 'self';" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer" always;
    add_header X-XSS-Protection "1; mode=block" always;



    # Define a rate limit zone
    # $binary_remote_addr: The key for rate limiting, typically the client's IP address
    # zone=my_zone:10m: Defines a zone named "my_zone" with 10MB of memory
    # rate=500r/s: Limits to 1000 requests per second
    limit_req_zone $binary_remote_addr zone=my_zone:10m rate=50r/s;


    # Gzip settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript application/rss+xml image/svg+xml application/xml application/x-javascript;

    # Server block
    server {
        listen 443 ssl ;
        listen [::]:443 ssl ;
        server_name          ec2-13-200-157-160.ap-south-1.compute.amazonaws.com;  # Replace with your domain name
       

        # Define proxy settings
        location /auth {
            # Apply the rate limit defined in my_zone
            limit_req zone=my_zone burst=200 nodelay;

            proxy_pass http://user-auth:5001;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /consumer {
            # Apply the rate limit defined in my_zone
            limit_req zone=my_zone burst=200 nodelay;

            proxy_pass http://tea-process:5002;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /farmer {
            # Apply the rate limit defined in my_zone
            limit_req zone=my_zone burst=200 nodelay;

            proxy_pass http://tea-process:5002;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /processor {
            # Apply the rate limit defined in my_zone
            limit_req zone=my_zone burst=200 nodelay;

            proxy_pass http://tea-process:5002;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /retailer {
            # Apply the rate limit defined in my_zone
            limit_req zone=my_zone burst=200 nodelay;

            proxy_pass http://tea-process:5002;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /transporter {
            # Apply the rate limit defined in my_zone
            limit_req zone=my_zone burst=200 nodelay;

            proxy_pass http://tea-process:5002;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
